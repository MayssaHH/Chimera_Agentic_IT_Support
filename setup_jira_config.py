#!/usr/bin/env python3
"""
JIRA Configuration Setup Script
Helps users set up their JIRA credentials for production use
"""
import os
import sys
from pathlib import Path


def setup_jira_config():
    """Interactive setup for JIRA configuration"""
    print("🔧 JIRA Configuration Setup")
    print("=" * 50)
    
    # Check if config directory exists
    config_dir = Path("src/config")
    if not config_dir.exists():
        print("❌ Config directory not found. Please run this from the project root.")
        return False
    
    # Check if jira_settings.py already exists
    jira_settings_file = config_dir / "jira_settings.py"
    if jira_settings_file.exists():
        print("⚠️  jira_settings.py already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response != 'y':
            print("Setup cancelled.")
            return False
    
    print("\n📝 Please provide your JIRA credentials:")
    print("(Press Enter to skip any field)")
    
    # Get JIRA credentials
    base_url = input("JIRA Base URL (e.g., https://yourcompany.atlassian.net): ").strip()
    user = input("JIRA User Email: ").strip()
    token = input("JIRA API Token: ").strip()
    project_key = input("JIRA Project Key (e.g., IT): ").strip()
    
    # Validate required fields
    if not all([base_url, user, token, project_key]):
        print("\n❌ All fields are required!")
        return False
    
    # Create the configuration file
    config_content = f'''# JIRA Configuration
# Generated by setup script - DO NOT commit to version control

# JIRA Server Configuration
JIRA_BASE_URL = "{base_url}"
JIRA_USER = "{user}"
JIRA_TOKEN = "{token}"
JIRA_PROJECT_KEY = "{project_key}"

# Optional Settings
JIRA_API_VERSION = "3"
JIRA_TIMEOUT_SECONDS = 30
JIRA_MAX_RETRIES = 3

# Security Note: Keep this file secure and never share it
'''
    
    try:
        with open(jira_settings_file, 'w') as f:
            f.write(config_content)
        
        print(f"\n✅ JIRA configuration created successfully!")
        print(f"📁 File: {jira_settings_file}")
        
        # Add to .gitignore if not already there
        gitignore_file = Path(".gitignore")
        if gitignore_file.exists():
            with open(gitignore_file, 'r') as f:
                gitignore_content = f.read()
            
            if "jira_settings.py" not in gitignore_content:
                with open(gitignore_file, 'a') as f:
                    f.write("\n# JIRA Configuration (contains sensitive data)\nsrc/config/jira_settings.py\n")
                print("✅ Added jira_settings.py to .gitignore")
        else:
            # Create .gitignore if it doesn't exist
            with open(gitignore_file, 'w') as f:
                f.write("# JIRA Configuration (contains sensitive data)\nsrc/config/jira_settings.py\n")
            print("✅ Created .gitignore with jira_settings.py")
        
        print("\n🔒 Security: Your JIRA credentials are now stored securely")
        print("📋 Next: Test the workflow with 'python3 -c \"from src.graph.build import build_graph; workflow = build_graph(); test_state = {'user_request': {'title': 'Test', 'description': 'Testing JIRA integration'}}; result = workflow.invoke(test_state)\"'")
        
        return True
        
    except Exception as e:
        print(f"\n❌ Error creating configuration: {e}")
        return False


def main():
    """Main entry point"""
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("Usage: python3 setup_jira_config.py")
        print("This script helps you set up JIRA credentials for production use.")
        return
    
    success = setup_jira_config()
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
